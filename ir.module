<?php

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the asg module
 */
function ir_permission() {
  return array(
    'display status' => array(
      'title' => t('Display the reservation status'),
      'description' => t('Show the tab for displaying the current reservation status.'),
    ),
    'reserve item' => array(
      'title' => t('Reserve an item'),
      'description' => t('Change the reservation status for an item.'),
    ),
    'administer settings' => array(
      'title' => t('Administer item reservation module'),
      'description' => t('Perform administration tasks for item reservation module.'),
    ),
  );
}

// function ir_perm()

function ir_menu() {

  $items = array();

  $items['admin/structure/ir'] = array(
    'title' => 'Item reservation',
    'description' => 'Configure item reservation for content types.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ir_admin'),
    'access arguments' => array('administer settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['node/%node/reservation'] = array(
    'title' => 'Reservation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ir_form', 1),
    'access callback' => 'ir_access_display_status',
    'access arguments' => array(1),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

// function ir_menu()



function ir_get_enabled_content_types($in_array = NULL) {
  $a = array();
  if (!$in_array)
    $in_array = variable_get('ir_contenttypes', array());
  foreach ($in_array as $k => $v) {
    if ($v)
      $a[$k] = $v;
  }
  return $a;
}

// function ir_get_enabled_content_types



function _ir_do_breadcrumb($contenttype) {
  $breadcrumbcode = variable_get('ir_settings_' . $contenttype . '_breadcrumb_php', '');
  if ($breadcrumbcode && module_exists('php')) {
    php_eval($breadcrumbcode);
  }
}

// function _ir_do_breadcrumb

function _ir_query_result($node_id) {
  $query = db_select('itemreservation', 'ir')->fields('ir')->condition('ir.nid', $node_id);
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  if (count($result) > 0) {
    $values = array_values($result);
    $result = $values[0];
  }

  return $result;
}

function _ir_node_is_reserved($result) {
  if (count($result) > 0) {
    $reserved = $result['status'] == '1';
  }
  else {
    $reserved = FALSE;
  }

  return $reserved;
}

function ir_access_display_status($node) {
  $cta = ir_get_enabled_content_types();
  if (!in_array($node->type, $cta)) {
    return FALSE;
  }

  return user_access('display status');
}

// function ir_access_display_status



function ir_admin() {
  $form = array();

  $cta = ir_get_enabled_content_types();

  $form['ir_contenttypes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content types'),
    '#options' => node_type_get_names(),
    '#default_value' => $cta,
    '#description' => t('Select all content types that can be used for item reservation.'),
  );

  foreach ($cta as $ctname) {
    $nodeinfo = node_type_get_type($ctname);
    $p = 'ir_settings_' . $ctname;
    $form[$p] = array(
      '#type' => 'fieldset',
      '#title' => $nodeinfo->name,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    $form[$p][$p . '_1'] = array(
      '#type' => 'textfield',
      '#title' => t('Value for reserved item'),
      '#default_value' => variable_get($p . '_1', t("The item [node:title] is reserved.")),
      '#description' => t('Hint: use [node:title] to insert the current item\'s title'),
    );

    $form[$p][$p . '_0'] = array(
      '#type' => 'textfield',
      '#title' => t('Value for free (unreserved) item'),
      '#default_value' => variable_get($p . '_0', t("The item [node:title] is not reserved.")),
      '#description' => t('Hint: use [node:title] to insert the current item\'s title'),
    );

    if (module_exists('php')) {
      $form[$p][$p . '_breadcrumb_php'] = array(
        '#type' => 'textarea',
        '#title' => t('Custom breadcrumb path'),
        '#default_value' => variable_get($p . '_breadcrumb_php', ''),
        '#description' => t('Optional. Enter PHP-Code to create your custom breadcrumb menu. An example can be found at <a href="http://api.drupal.org/api/drupal/includes--common.inc/function/drupal_set_breadcrumb/6#comment-1353">http://api.drupal.org/api/drupal/includes--common.inc/function/drupal_set_breadcrumb/6#comment-1353</a>.'),
      );
    }
    else {
      $form[$p][$p . '_no_php'] = array(
        '#markup' => t('Enable the PHP Filter module if you would like to change the breadcrumb path.'),
      );
    }
  }

  return system_settings_form($form);
}

// function ir_admin



function ir_form($a, $form_state, $node) {
  $form = array();
  $type = $node->type;

  $form_state['no_cache'] = TRUE;

  $reserved = _ir_node_is_reserved(_ir_query_result($node->nid));

  $text0 = variable_get('ir_settings_' . $type . '_0', 'Not reserved');
  $text1 = variable_get('ir_settings_' . $type . '_1', 'Reserved');

  $statustext = t($reserved ? $text1 : $text0);

  $form['ir_status'] = array(
    '#markup' => token_replace($statustext, array('node' => $node)),
    '#suffix' => '<br />'
  );

  if (user_access('reserve item')) {
    $form['ir_nid'] = array(
      '#type' => 'hidden',
      '#value' => $node->nid,
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => $reserved ? t('Clear reservation') : t('Reserve it for me'),
    );
  }

  _ir_do_breadcrumb($type);

  return $form;
}

// function ir_form



function ir_form_submit($form_id, $form_values) {
  if (!user_access('reserve item')) {
    drupal_access_denied();
    return;
  }

  $result = _ir_query_result($form_values['values']['ir_nid']);
  if (empty($result)) {
    $result = array(
      'nid' => $form_values['values']['ir_nid'],
      'status' => 0,
    );
  }

  $result['status'] = _ir_node_is_reserved($result) ? 0 : 1;

  drupal_write_record('itemreservation', $result, array('id'));
}

// function ir_form_submit

